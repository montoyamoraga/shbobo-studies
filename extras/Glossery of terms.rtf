{\rtf1\ansi\ansicpg1252\cocoartf1038\cocoasubrtf360
{\fonttbl\f0\fswiss\fcharset0 ArialMT;}
{\colortbl;\red255\green255\blue255;\red236\green236\blue236;\red24\green72\blue189;\red0\green35\blue228;
}
{\*\listtable{\list\listtemplateid1\listhybrid{\listlevel\levelnfc23\levelnfcn23\leveljc0\leveljcn0\levelfollow0\levelstartat1\levelspace360\levelindent0{\*\levelmarker \{none\}}{\leveltext\leveltemplateid1\'00;}{\levelnumbers;}\fi-360\li720\lin720 }{\listname ;}\listid1}}
{\*\listoverridetable{\listoverride\listid1\listoverridecount0\ls1}}
\paperw11900\paperh16840\margl1440\margr1440\vieww13220\viewh10100\viewkind0
\deftab720
\pard\pardeftab720\ql\qnatural

\f0\fs32 \cf0 \cb2 Shlisp Tutorial\
\pard\pardeftab720\sa300\ql\qnatural

\b\fs38 \cf0 \cb1 Shlisp Tutorial\
\pard\pardeftab720\ql\qnatural

\b0\fs30 \cf0 \
*You can see the actual raw data values that your shnth is outputting at any time \'a0by typing from the command line:\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0
\i ./shlisp (lin), 
\i0 \'a0
\i ./shlisp.app (mac), .\\shlisp.exe (win)
\i0 \
\pard\pardeftab720\sa300\ql\qnatural

\b\fs38 \cf0 Part 2: What is shLISP?\
\pard\pardeftab720\ql\qnatural

\b0\fs30 \cf0 \
What we see in the universe, as we go within the smaller and smaller scales of physics within the atom, is a nesting of \'93programming languages\'94: a more generalized \'93classical approach\'94 that works well on our everyday scale, and then a special quantized \'93DSP approach\'94 in the realm of those buzzing things that make up matter. \'a0LISP sh LISP is meant to reflect that nature. \'a0It started as shLISP, which is technically a new language completely, not related to LISP, but more like CSOUND or SUPERCOLLIDER, in that it deals in virtual sounds, and the various computer music techniques to synthesize them. \'a0These \'93patches\'94, or \'93presets\'94 are arranged in a larger list of presets, or, if you will, a \'93situation vector\'94, max size 256. \'a0Each situation is coded by enclosing curly braces: \'93\{\'93 and \'93\}\'94. \'a0The compiler/interpreter, on reaching a new section enclosed by curlies, makes note of the position in the generated byte code stream, to write in a special \'93byte code vector\'94 at programming time. \'a0Programming time is when the user plugs a SHNTH in to USB, and invokes shlisp, giving a text file that is SHLISP code. \'a0\
\
So, to sum up, shLISP is fundamentally DSP bytecode, that is interpreted and synthesized on the arm cortex embedded chip. \'a0shLISP consists of m-expressions, enclosed by \'93[\'93 and \'93]\'94, which are simply specifications of a certain musical opcode, such as triangle wave, resonant filter, granular synthesis. \'a0Another \'93layer of the onion skin\'94 on top of m-expressions, are s-expressions, enclosed by \'93(\'93 and \'93)\'94. \'a0these are the completions of the functional expressions of DSP, with functional parameters to modulate the sounds. \'a0Of course, an s-expression can be passed another s-expression, as well as a simple old atom. \'a0Let me back up and say that atoms are \'93chars\'94, signed or unsigned, they are 8 bits, from 0 to 255 or -128 to 127 depending on context. \'a0This is the \'93arab-dirac\'94 dichotomy. \'a0Reference to web texts on ancient arabic algebra, which had no negative numbers, and dirac, who first posited anti-matter. \'a0And one more thing, is that: in the primitive shlisp bytecode language, 255 is equal to \'93(\'93, as well as negative one. \'a0So you can\'92t use 255 or -1 as an atom. \'a0And likewise, you can\'92t use zero as an atom. \'a0Instead you must use the two atoms \'93()\'94. \'a0BTW, for negative one you can use an opcode, an m-expression with no parameters: \'93([negwon])\'94 will generate a strict negative one (don\'92t worry you won\'92t ever really need to use it).\
\
Now, you will notice that m-expressions, and s-expressions have been entirely 
\i co-opted
\i0 \'a0into the shlisp language. \'a0That was the intent, to use the vintage look and feel of lisp for this synthesis language. \'a0Now, we find that to manage many presets (we have 64k of bytecode program memory, and 256 vectors), we want another layer ontop, like a macro generator, but less like c and more like lisp, which can dynamically manipulate macro functions like lambda expressions, and their content. \'a0So, we propose to utilize the characters \'93<\'94 and \'93>\'94 like parentheses, to specify a fully functional, authentic, but minimal dialect of LISP as a meta-layer. This will be the direction of future development.\
\
\pard\pardeftab720\ql\qnatural

\fs38 \cf0 Is it compiler or interpreter?
\fs30 \
\
Well to answer this question is difficult. \'a0First let me say that there are many functions accomplished by invoking the command \'93shlisp\'94. \'a0It is a nexus of activity, and it can even reprogram the synthesizer itself. \'a0That means that you can re-write all of its functionality, if you wish, in ARM CORTEX M3 assembly code. \'a0Let\'92s talk first about language tiering, with the following bulleted list:\
\
\pard\tx220\tx720\pardeftab720\li720\fi-720\ql\qnatural
\ls1\ilvl0\cf0 		The embedded synthesizer, as I said, runs ARM CORTEX M3 assembly code. \'a0It scans the bytecode on every sample, and uses m-expressions as keys to a matrix of synth-opcodes, which it efficiently executes for aural satisfaction\'92s sake.\
		So, this synthesizer is reading bytecode which is programmed/reprogrammed by a USB connection from a host. \'a0This bytecode is COMPILED SHLISP. \'a0It has an introductory vector that branches it to all its \'93situations\'94 so you can traverse them effortlessly. \'a0\
		(BTW the USB connection, ADC loop, DAC, systick, theremin timers, are in a not-to-be-reprogrammed space in the embed, they are the bullet-proofed code)\
		Now, back to the host. \'a0The host must compile SHLISP BYTECODE and transmit it in chunks of 8bytes, and terminate this stream with something smaller in size than 8bytes.\
		The first 64k go into BYTECODE memory, and then you have the option to include another file that is assembled ARM CORTEX M3 code to reprogram the matrix. \'a0We\'92re gonna completely not worry about this in this white-paper. \'a0It is for another piece of white-paper completely! \'a0The glossary at the end here only applies to standard, shbobo shlisp.\
		So we talk about only the first 64k, the SHLISP BYTECODE. \'a0Host has a c program, at the moment, that can convert simple s-expressions and m-expressions into said bytecode, and using core USB HID interface \'93SetReport\'94, to program these bytes and their vector table into the embed. \'a0At the moment, this is all filed under the concept of \'93
\b compiling\'94
\b0 \
\pard\pardeftab720\ql\qnatural
\cf0 \
\
\
\
\
\
\
\
\
\
\
\
\
\
\pard\pardeftab720\sa300\ql\qnatural

\b\fs38 \cf0 Part 3: Getting Started with shLISP\
\pard\pardeftab720\ql\qnatural

\b0\fs30 \cf0 \
The SHNTH is a USB device powered by internal batteries, or, you can connect with standard USB cable to a HOST computer. \'a0When connected, the SHNTH is always recharging its internal batteries. \'a0To hear the SHNTH, connect it to your computer via a USB cable and connect the \uc0\u8539 \'94 stereo audio output jack to your headphones or use a stereo cable to connect to the AUX input of your amplifier. Depending on the configuration of your amplifier or mixer you may also need a \'91stereo-to-dual mono\'92 adapter cable. These can be made yourself or purchased cheaply at most electronics distributors such as allectronics.com. Once your SHNTH is plugged in, you should hear some sound. \'a0You can experiment with squishing the bars, and pressing buttons, and hearing how it affects the synthesis patches.\
\
The latest source code for shLISP can be downloaded at {\field{\*\fldinst{HYPERLINK "http://www.shbobo.net/"}}{\fldrslt \cf3 \ul \ulc3 www.shbobo.net}}. The zip file contains the source and binaries for the three main political parties in the OS arena: mac, lin, and win. \'a0That's macintosh, linux, and windows. To use SHLISP you must be familiar with the terminal. \'a0On Macintosh it is buried down in applications->utilities, but on Linux it is usually a central part of the system. So, after you have unzipped the source to your Desktop, then you must "cd" there. \'a0That means "change directories". \'a0So for example your first step will probably be "cd Desktop". \'a0Then cd into the shnth directory. \'a0Then, cd into the shlsp directory. \'a0From here you can run shlisp as "./shlisp.app". \'a0On Linux, you will also need sudo. \'a0So, to program your device with an example file, here are the respective commands:\
\

\i ./shlisp.app examp/vancouver.txt
\i0 \

\i sudo ./shlisp examp/vancouver.txt
\i0 \
\
These program the device with the "vancouver" source text.\
Now we should talk about what's in that text.\
\
SHLISP is a computer music programming language based loosely on LISP. \'a0LISP looks vintage, and there are even some "lost" features that we have brought back to life here. \'a0The original specification had two kinds of expressions:\
\
- M-expressions (or \'91mexp\'92 for short), which we have appropriated to mean "Musical expression," in the sense of "Computer Music". \'a0They
\i\b \ul \'a0\ulnone may be
\i0\b0 \'a0enclosed by square brackets, which can contain a letter a..d that indicates \'93which instance\'94 of the mexp. \'a0For example, 
\i [horn a], \'a0[horn b] 
\i0 or, if only using a single instance, \'a0just simply 
\i horn
\i0 .\
\
- S-expressions (or \'91sexp\'92), which holds the archetypal look of LISP. \'a0We use them to mean "Signal expressions," in the sense of "Digital Signal Processing". \'a0Enclosed by parentheses: 
\i ([horn a] 52 \'a062)
\i0 . \'a0Note that a sexp contains a mexp at its head. \'a0Thus mexps can be thought of as the "function" or "opcode", and the sexp groups the parameters in a list.\
\
Each mexp, enclosed by square brackets, evaluates to a single atom. \'a0So do numbers. \'a0Briefly, numbers are either signed bytes (-128 .. 127), or unsigned (0 .. 255).\
\
\pard\pardeftab720\ql\qnatural

\b \cf0 ;
\b0 \'a0 a comment is preceded by semi colon\

\b ( \'a0
\b0 ;for specific reason, every text starts with "("\

\b \{
\b0 \'a0 ;this means a situation has begun\

\b ( 
\b0 \'a0;our first sexpression\

\b [left] \'a0
\b0 ;begins with an M-expression, sends the output left\

\b ([horn a] 82 10) 
\b0 \'a0;we will hear a triangle wave there\

\b ) 
\b0 \'a0;close out the left\

\b \}
\b0 \'a0 ;close out the situation\
\
Note the mention of "situation", and using a new kind of bracket to mark it. \'a0We didn't mention this until now, so don't worry. \'a0Situations are gonna be our kind of "patch" or "preset" system. \'a0Basically you can write many of them into one text and, using some special M-expressions, jump between them. \'a0But for the moment we will only focus on one situation at a time.\
\
Let's talk now about the insides of M-expressions. \'a0[left] is a single word within square brackets, which thus has a single meaning. \'a0You can use it as many times as you want, to output sound to the left speaker. \'a0To output to the right, use [right]. \'a0
\b [
\b0 horn a] is another M-expression, but it contains two words. \'a0It is a true opcode, in that it has instances that are unique in time and space. \'a0For "horn", which means triangle wave, there are eight possible instances, from the letter a to the letter h. \'a0Obviously, we are only using one, so we can use the letter a.\
Now we can see how M-expressions are synthesized in an S-expression. 
\b \'a0
\b0 [horn a] by itself has no pitch parameters, these are specified by the text in the rest of its S-expression. \'a0horn, in particular, takes two parameters, called "nume" and "deno", short for numerator and denominator. \'a0These are the two parts of a ratio for specifying pitch. \'a0SHLISP is a musical language of Just Intonation, which means it uses these ratios. \'a0We threw out two numbers: 82 and 10, but these can be any number. \'a0Get good at choosing numbers. \'a0The other thing you can do is "nest" other S-expressions as those numbers.\
\
\pard\pardeftab720\ql\qnatural

\i \cf0 ([horn a] ([horn b] 55 32) 10)
\i0 \
Here, [horn a] is frequency modulated by [horn b]
\b .
\b0 \'a0 It is the first parameter of [horn a], the nume, that is modulated. \'a0\
\

\i ([horn a] 82 10 ([bar a]))
\i0 \
Here, [horn a] is amplitude modulated by [bar a]. This will make the physical bar control the loudness of the triangle wave. \'a0Notice that nume and deno are unmodulated, but it is a third parameter, called "mul" that is used, to multiply the triangle by the bar. \'a0"mul" is optional, but it is highly used, so it is often following the other, mandatory parameters.\
\
([horn a] ([horn b] 55 32 ([bar a]) 29) 10)\
After "mul" comes "add". \'a0It too is optional. \'a0It means to add an offset to the value already computed in multiply. \'a0We use it to add 29 to the value of the modulator, to change the sidebands of the modulation. \'a0The idea of mul and add as final parameters is not new, it comes from "Supercollider".\
\
Superposition means to add several signals together. \'a0This is what the [left] and [right] mexps actually do: they can take a list of many sexpressions and sum them together, like an audio mixer:\
\
(
\i [left]
\i0 \
\pard\pardeftab720\fi960\ql\qnatural

\i \cf0 ([horn a] 82 10)
\i0 \

\i ([horn b] 83 10)
\i0 \

\i ([horn c] 84 10)
\i0 \

\i ([horn d] 85 10) \'a0
\i0 \

\i ;these four triangle waves should PHASZE
\i0 \
\pard\pardeftab720\ql\qnatural

\i \cf0 ) ;close out the left
\i0 \
\
Note the formatting conventions commonly followed: the more you nest, the more you indent. \'a0An open parenthesis is always matched by a closed parenthesis, and the same with square brackets. It may be useful to write your texts with a text editor that does auto-balancing of parantheses such as TextWrangler ({\field{\*\fldinst{HYPERLINK "http://www.barebones.com/products/textwrangler/"}}{\fldrslt \cf3 \ul \ulc3 http://www.barebones.com/products/textwrangler/}}\'a0, for Mac only, free).\
\
So now we are about to present a complete list of the SHLISP musical expressions. \'a0They are divided into three categories:\
\
\pard\pardeftab720\ql\qnatural

\b \cf0 - Butts
\b0 , as in buttons, these give you a signal directly from the physical interface, including the buttons bars, corps (antennae) and the mike. \'a0Since these reflect the physical state of your device you can call them as many times you want without changing anything.\
\
- 
\b Nuts
\b0 , like in "assorted nuts", as in the comestible and also the mechanical fastener. \'a0These are individual helpful things to have, like [
\i left]
\i0 . \'a0Typically they are reusable in many different contexts.\
\
- 
\b Ops
\b0 , as in opcodes. \'a0Every time you call one of these, they calculate something, like \'91move along the triangle wave\'92 or \'91filter a sound\'92. \'a0Thus they have either 4 or 8 specific instances, as already mentioned. \'a0You can call each instance as many times as you want, but every time you call it, it changes state. However there is one exception to \'a0this: if you call an opcode and don't put any parameters in the S-expression, ie, just call it by itself, then you will get a signal of what it is at the moment, without changing it. \'a0Thus you can set up a horn ahead of time, and then reference it as a modulation later on.\
\
For example:\
\
\pard\pardeftab720\ql\qnatural

\i \cf0 ([horn a] 74 31)
\i0 \

\i ([left]
\i0 \

\i \'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0([horn b] ([horn a]) 10)
\i0 \

\i )
\i0 \
\
Here [
\i horn a]
\i0 \'a0is referenced to FM [
\i horn b]
\i0 . \'a0Note that to reference it, you still need to have parentheses around the square brackets. \'a0\
\
*You can get a list of all shLISP mexps and their parameters at any time by using command line help. Just cd into the shlsp folder and type: \'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0
\i \'a0./shlisp -h (lin), ./shlisp.app -h (mac), .\\shlisp.exe -h (win)
\i0 \
\
If you would like help in chinese then type
\i \'a0 -z instead of -h
\i0 \
\

\i ((corp 4 saw) 21 32)
\i0 \
\
an sexp as an opcode, what does that mean? \'a0This is a dynamic mexp. \'a0It can change and it is controlled by corp, scaled down to four pos/neg, and offset by the number for \'93saw\'94, which makes the range between the saws and the horns, so you can hear them switching back and forth. \'a0try it.\
\
\pard\pardeftab720\ql\qnatural

\b \cf0 BUTTS
\b0 \
Without further ado, let's list the butts that you can call, to give you a feel. \'a0When there are parameters, they are listed following the opcode. \'a0For butts, the only parameters are mul and add, which are optional.\
\

\b [wind]
\i\b0 \'a0mul add ;the microphone
\i0 \

\b [corp a/b]
\i\b0 \'a0mul add ;the woven antennae
\i0 \

\b [bar a/b/c/d]
\i\b0 \'a0mul add ;one of the bars
\i0 \

\b [minor a/b/c/d]
\b0 \'a0
\i mul add ;the lower buttons
\i0 \

\b [major a/b/c/d]
\i\b0 \'a0mul add ;the upper buttons
\i0 \
minor are the lower tier of four buttons, and major are the upper.\
\

\b NUTS
\b0 \
\pard\pardeftab720\ql\qnatural

\i\b \cf0 [left]
\b0 \'a0liszt
\i0 ; means it takes a superposition\
\pard\pardeftab720\ql\qnatural

\b \cf0 [right]
\b0 \'a0
\i liszt
\i0 ; \'a0an indefinite amount of parameters\

\b [srate]
\b0 \'a0
\i value
\i0 \'a0; \'a0change sample rate to this value\

\b [jump]
\b0 \'a0
\i value
\i0 \'a0; \'a0if zero stay here, otherwise jump 
\i value
\i0 \'a0situations, which may be negative.\

\b [mul] 
\i\b0 inn mul add; do a multiplication
\i0 \

\b [add]
\i\b0 \'a0inn add ; do an add
\i0 \

\b [reflect]
\i\b0 \'a0inn oth \'a0mul add
\i0 \'a0; a type of waveshaper (reflects down at threshold)\

\b [return]
\i\b0 \'a0inn oth mul add 
\i0 ; another type of waveshaper (returns to 0 at\'a0threshold)\

\b [and]
\i\b0 \'a0inn oth ; 
\i0 another waveshaper, also can be logic\

\b [xor]
\b0 \'a0
\i inn oth ; 
\i0 another waveshaper, \'a0also can be logic\

\b [modo]
\b0 \'a0
\i inn oth; 
\i0 a circuit-bending effect, multiples two inputs w/o scaling and wraps the result\

\b [short]
\i\b0 \'a0big little
\i0 \'a0;make a 16 bit constant\
ShLISP runs on the arm cortex which is a 32-bit processor. \'a0The DSP uses all 32 bits, while signal patching is done with 16 bits. \'a0The byte code you are programming uses 8 bits per byte, so the 
\i [short]
\i0 \'a0mexp is telling that you can have finer precision if you need it.
\i \'a0[short]
\i0 \'a0is especially useful in generating difference tones, as in the example below. By playing around with both the 
\i big
\i0 \'a0and
\i \'a0little 
\i0 values of the short as well as the 
\i deno
\i0 \'a0value of the horn, a huge range of sonic artifacts can be explored:\
\
\pard\pardeftab720\ql\qnatural

\i \cf0 ([right]
\i0 \
\pard\pardeftab720\fi960\ql\qnatural

\i \cf0 ([horn a] ([short] 110 20) 50)
\i0 \

\i ([horn b] ([short] 111 20) 50)
\i0 \
\pard\pardeftab720\ql\qnatural

\i \cf0 )
\i0 \
\
\
\pard\pardeftab720\ql\qnatural

\b \cf0 OPCODES
\b0 \

\b [horn a..h]
\i\b0 \'a0nume deno mul add
\i0 \'a0; triangle oscillator\

\b [saw a..h]
\i \'a0
\b0 nume deno mul add
\i0 \'a0; saw oscillator\

\b [toggle a..h]
\b0 \'a0
\i square mul add
\i0 \'a0\

\b [togo a..h]
\i\b0 \'a0signotrig liszt
\i0 \

\b [swoop a..h]
\b0 \'a0
\i trig nume deno mul add
\i0 \'a0;a triggered triangular envelope\

\b [mount a..h]
\i\b0 \'a0nume deno mul add ; 
\i0 slow LFO\

\b [smoke a..d]
\b0 \'a0
\i mul add
\i0 ; white smoke\

\b [dust a..d]
\b0 \'a0
\i amount mul add
\i0 \'a0;random pulses\

\b [fog a..d] 
\i\b0 trig nume deno nume deno mul add
\i0 \'a0; granular oscillator\

\b [haze a..d] 
\i\b0 trig nume deno nume deno mul add
\i0 \'a0; granular oscillator\

\b [swamp a..d]
\b0 \'a0
\i trig nume deno nume deno mul add
\i0 \'a0; granular oscillator\

\b [string a..d]
\i\b0 \'a0trig nume deno feedback mul add 
\i0 ; stringlus-strong\

\b [comb a..d]
\b0 \'a0
\i inn nume deno feedback mul add
\i0 \'a0; comb filter\

\b [zither a..d]
\i\b0 \'a0trig deno feedback mul add
\i0 ; a quartet of strings\

\b [wave a..d]
\b0 \'a0
\i inn q freq mul add
\i0 \'a0; resonant lopass filter\

\b [water a..d]
\b0 \'a0
\i trig q freq mul add ; 
\i0 triggered filter pings\

\b [salt a..d]
\b0 \'a0
\i inn q freq mul add ; 
\i0 hipass filter\

\b [horse a..d] 
\i\b0 upp don upp don mul add
\i0 \'a0; fourses oscillator\

\b [slew a..d]
\b0 \'a0
\i inn upp don mul add
\i0 \'a0; resonant filter\

\b [wheel a..d]
\b0 \'a0
\i upp don mul add ; 
\i0 triggered filter pings\

\b [sauce a..d]
\b0 \'a0
\i period mul add
\i0 ; slows things down\

\b [salsa a..d]
\b0 \'a0
\i trig inn mul add
\i0 \'a0; sample and hold\

\b [square]
\b0 \'a0inn ref mul add ;a comparator\
\
\'a0ShLlisp is running on a 32-bit processor but it is not float computation; \'a0rather, it is computing sounds using "Just Intonation". \'a0Thus it is using "just integers". \'a0In floats, when you multiply signals, they are usually between -1 and 1, so the result doesn't go out of range, but stays neatly between unary values. \'a0The same thing can be done with integers, but how to specify it? \'a0\
\
The mul parameter is actually better thought of as a "scaling" value. \'a0In signed numbers, 127 is full steam, -128 is full anti-steam. \'a0So we can write out what mul really represents as:\
\'a0\
"signal * mul / 128".\
\
\'a0That means it is divided back down by 128 to stay within range.\
\
We mentioned signed versus unsigned so now we are forced to speak about this dichotomy. \'a0In signal processing, most signals are thought of as having positive and negative components, so signed math is the most natural. \'a0However, the arm cortex supports both signed and unsigned equally so to offer the unique features of unsigned signal processing, you can switch into "arab" mode at any point in your code:\
\
([arab]\
\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0([horn a] 231 129) ;note nume is above 127!\
) ;arab math is only positive, between 0 and 255\
\
This is an homage to ancient Arabic algebra, which had no negative numbers. \'a0There is a corresponding switch back to signed math, called [dirac], named after the physicist who discovered anti-particles. \'a0It is the default mode.\
\
DIRAC = -128 .. 127; donotuse -1, 0\
ARAB = 0 .. 254; donotuse 255, 0\
\
If you really need -1, there is a nut to get it: ([negwon])\
If you need zero, you must consult the ancient annals of the original LISP language. \'a0There, 0 = (). \'a0So to get zero you type an empty s-expression!\
\
The reason you do not use these two numbers, is because 255, which is equivalent to -1 in chars, is the shlisp bytecode for "(". \'a00 is the shlisp bytecode for ")". \'a0So you see, all the parentheses you type out in your program do not "boil out" on shlisping, but are sent directly to the device Flash as 255s and Zeros.\
\
Now we will back up and cover a special mode called "Orange Light Affair". \'a0This has two purposes: if you have written bad code to the device and it locks up, you can enter this mode, which also initiates a "fast charge" of the batteries. \'a0You can leave it in this mode and it will automatically exit after about 2 minutes. \'a0During that time, the synthesizer is off, to prevent running viral code, but you can still reprogram it.\
\
\pard\pardeftab720\ql\qnatural

\fs38 \cf0 More Info on Selected Opcodes
\fs30 \
\
\pard\pardeftab720\ql\qnatural

\b \cf0 Fog 
\b0 began as an interpretation of the classic Csound opcode, \'93grain\'94. It was chosen that four grains would be available per, so it was originally named forg but that sounded too much like borg, bjork, and korg. That said, it has the emulation of primitive \'93nineties\'94 granular boxes, Capybara sounds, although Csound was my preference, under the tutelage of Gary Lee Nelson. Fog is like mist in the woods, or the ocean. That said, it is better to think of it as a string quartet, as it is, in fact, a musical expression. The string quartet is handed notes by a stroke of the baton, that baton of the conductor. He triggers each player in turn, who memorizes four runes, to play until triggered again in turn. So you see if you run the trigger fast enough and the grains are short enough, it can be like a cloud. The trick is in the nume deno nume deno. Giving them smoke, muld down, and offsetted to your cloud zone DC. Then give the trig a feed of dust, to make the coincidental, \'93brownian walk\'94 motion of classical granular synthesis.\
\

\b Swamp
\b0 , like fog, is a string quartet. \'a0This means that there are four voices per operator, so you get 16 total, because there are four operators. Swamp, as a musical expression, is almost exactly the same as fog; it has a conductor, who triggers grains in turn, who then memorize four runes (nume deno nume deno). \'a0But there is one difference, we will get to later.\
\
Let me explain these four runes. \'a0Each grain has two parts: a swoop and a horn, built into it. \'a0When the swoop is triggered, it goes up and down, or makes a scurve, depending if you are Arab or Dirac. \'a0This swoop goes on to mul by the value of the horn, which is saying "VCA", i.e. it envelopes it. \'a0It modulates the volume of it, making the traditional grain surrounded by silence.\
\
Fog and swamp both output a superposition of the four grains. \'a0Now, what is the difference between fog and swamp? \'a0In swamp, the swoops are added to the static value of the horn deno, making them swoop in pitch like swamp creatures!\
\
\
\
\
\
\
\
\
\
\
\
\
\pard\pardeftab720\sa300\ql\qnatural

\b\fs38 \cf0 \
Part 5. Glossary of m-expressions\
\pard\pardeftab720\ql\qnatural

\b0\fs30 \cf0 \
\pard\pardeftab720\ql\qnatural

\b \cf0 wind\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0[wind] mul add
\b0 \
\

\b \'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0
\b0 \ul Description\ulnone : 
\i transmits the value received by the onboard microphone
\i0 \
\pard\pardeftab720\li960\fi960\ql\qnatural
\cf0 mul: output will be multiplied by this value\
add: this value will be added to output\
\pard\pardeftab720\ql\qnatural
\cf0 \
\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0example:\
\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0
\i ;use mic to control volume and pitch of triangle oscillator
\i0 \
\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0([left]\
\pard\pardeftab720\li1920\fi960\ql\qnatural
\cf0 ([arab]\
([horn a] ([add] ([slew a]) 90) 190 ([slew a] ([wind]) 245 5))\
\pard\pardeftab720\li960\fi960\ql\qnatural
\cf0 )\
\pard\pardeftab720\ql\qnatural
\cf0 \
\
\pard\pardeftab720\ql\qnatural

\b \cf0 corp\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0[corp] mul add
\b0 \
\
\pard\pardeftab720\li960\fi960\ql\qnatural
\cf0 \ul \ulc0 Description\ulnone : 
\i transmits the value of the specified antenna, range is -128 to 127
\i0 \
mul: output will be multiplied by this value\
add: this value will be added to output\
\pard\pardeftab720\ql\qnatural
\cf0 \
\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0example:\
\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0
\i ;use corp to widely bend horn pitch. slew smooths out steppiness
\i0 \
\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0([horn a] ([slew a] ([corp a] 70 30) 8 8) ([slew b] ([corp b] 30 70) 8 8))\
\
\pard\pardeftab720\ql\qnatural

\b \cf0 bar \'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0[bar] mul add
\b0 \
\
\pard\pardeftab720\li1920\ql\qnatural
\cf0 \ul Description\ulnone : 
\i transmits the value of the specified barre. typical response is an s-curve (press and release) between -128 to 127
\i0 \
\pard\pardeftab720\li960\fi960\ql\qnatural
\cf0 mul: output will be multiplied by this value\
add: this value will be added to output\
\pard\pardeftab720\ql\qnatural
\cf0 \
\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0
\i ;simple 4note saw organ
\i0 \
\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0([saw a] 24 94 ([bar a])) ([saw b] 28 85 ([bar b]))\
\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0([saw c] 39 73 ([bar c])) ([saw d] 43 61 ([bar d]))\
\
\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0
\i ;simple sidrassi emulation with panning
\i0 \
\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0([horn a] 24 94 ([bar a])) ([horn b] 28 85 ([bar b]))\
\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0([horn c] 39 73 ([bar c])) ([horn d] 43 61 ([bar d]))\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\
\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0(pan ([horn a]) ([bar a])) (pan ([horn b]) ([bar b]))\
\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0(pan ([horn c]) ([bar c])) (pan ([horn d]) ([bar d]))\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\
\
\pard\pardeftab720\ql\qnatural

\b \cf0 minor \'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0[minor] mul add
\b0 \
\pard\pardeftab720\li960\fi960\ql\qnatural
\cf0 \ul Description\ulnone : 
\i transmits the value of the bottom buttons (0 or 1)
\i0 \
mul: output will be multiplied by this value\
add: this value will be added to output\
\pard\pardeftab720\ql\qnatural
\cf0 \
\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0
\i ;use minor buttons to play synth
\i0 \
\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0([horn b] 24 126 ([slew b] ([minor b]) 80 5))\
\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0([horn c] 36 127 ([slew c] ([minor c]) 80 5))\
\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0([horn d] 48 128 ([slew d] ([minor d]) 80 5))\
\
\
\pard\pardeftab720\ql\qnatural

\b \cf0 major \'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0[major] mul add
\b0 \
\pard\pardeftab720\li960\fi960\ql\qnatural
\cf0 \ul Description\ulnone : 
\i transmits the value of the top buttons \'a0(0 or 1)
\i0 \
mul: output will be multiplied by this value\
add: this value will be added to output\
\pard\pardeftab720\ql\qnatural
\cf0 \
\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0
\i ;use major buttons and bars to play synth with filtering
\i0 \
\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0([wave b] ([saw b] 24 126 ([slew b] ([major b]) 120 10)) 20 ([slew f] ([bar d]) 7 7))\
\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0([wave c] ([saw c] 36 127 ([slew c] ([major c]) 120 10)) 20 ([slew g] ([bar c]) 7 7))\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\
\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0([wave d] ([saw d] 48 128 ([slew d] ([major d]) 120 10)) 20 ([slew h] ([bar b]) 7 7))\
\
\pard\pardeftab720\ql\qnatural

\b \cf0 horn \'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0[horn] nume deno mul add
\b0 \
\pard\pardeftab720\li960\fi960\ql\qnatural
\cf0 \ul Description\ulnone : 
\i a triangle oscillator
\i0 \
nume: sets the rate at which the oscillator rises and falls\
deno: sets the oscillator\'92s boundaries (height/depth).\
mul: output will be multiplied by this value\
add: this value will be added to output\
\pard\pardeftab720\ql\qnatural
\cf0 \
\pard\pardeftab720\li960\fi960\ql\qnatural
\cf0 \ul example\ulnone : \'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\

\i ;use barres to amplitude modulate
\i0 \

\i ([left]
\i0 \

\i ([horn a] \'a084 ([corp a] -12 48) ([bar a]))
\i0 \

\i ([horn b] \'a096 ([corp b] -16 48) ([bar d])))
\i0 \
\pard\pardeftab720\fi960\ql\qnatural
\cf0 \
\pard\pardeftab720\li960\fi960\ql\qnatural

\i \cf0 ;frequency modulate the nume with another horn
\i0 \

\i ([right]
\i0 \

\i ([arab]
\i0 \

\i ([horn c] \'a0([horn b]) ([corp a] 40 96) ([swoop c] ([square] ([bar c]) 50) 4 252))
\i0 \

\i ([horn d] \'a0([horn a]) ([corp b] 30 126) ([swoop d] ([square] ([bar b]) 50) 6 242)))
\i0 \
\pard\pardeftab720\fi960\ql\qnatural
\cf0 \
\pard\pardeftab720\ql\qnatural

\b \cf0 saw \'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0[saw] nume deno mul add
\b0 \
\
\pard\pardeftab720\li960\fi960\ql\qnatural
\cf0 \ul Description\ulnone : 
\i a sawtooth oscillator \'a0(instantaneous rise)
\i0 \
nume: sets the rate at which the oscillator falls\
\pard\pardeftab720\li1920\ql\qnatural
\cf0 deno: sets the oscillator\'92s boundaries (height/depth)\
mul: output will be multiplied by this value\
add: this value will be added to output\
\pard\pardeftab720\li960\ql\qnatural
\cf0 \
\pard\pardeftab720\li960\fi960\ql\qnatural
\cf0 \ul example\ulnone : \'a0;
\i \'a0turn saws on and off with toggle
\i0 \

\i ([right] ([right]
\i0 \

\i ([toggle a] ([major d])
\i0 \

\i \'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0([saw a] 22 111 ([swoop a] ([swoop a] 1) 14 55)))
\i0 \

\i )))
\i0 \

\i ([left]
\i0 \

\i ([toggle b] ([major b])
\i0 \

\i \'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0([saw b] 38 111 ([swoop b] ([swoop b] 1) 15 55)))
\i0 \

\i ([toggle c] ([major c])
\i0 \

\i \'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0([saw b] 52 111 ([swoop c] ([swoop c] 1) 3 118)))
\i0 \
\
\pard\pardeftab720\ql\qnatural

\b \cf0 toggle\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0[toggle] square
\b0 \
\

\b \'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0
\b0 \ul Description: \ulnone \'a0t
\i urns things on and off
\i0 \
\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0square: switches the toggle from on to off\
\
\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\ul example\ulnone :\
\pard\pardeftab720\li960\fi960\ql\qnatural

\i \cf0 ; use minor b button to toggle on/off a granular synth you control with corps
\i0 \
\pard\pardeftab720\ql\qnatural
\cf0 \'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0([fog a] ([dust a] ([corp a] 100) ([toggle a] ([minor b])))\
\pard\pardeftab720\li960\fi960\ql\qnatural
\cf0 ([corp b] 40 20) ([corp a] 20 105) ([corp a] 68 24) ([corp b] 60 64))\
\pard\pardeftab720\ql\qnatural
\cf0 \
\pard\pardeftab720\ql\qnatural

\b \cf0 togo \'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0[togo a] signotrig liszt \'a0
\b0 \
\
\pard\pardeftab720\li1920\ql\qnatural
\cf0 \ul Description\ulnone :
\i \'a0steps through a sequence of values, advancing one step each time it receives a trigger. takes an unlimited list
\i0 \
signotrig: a signed trigger - positive moves one step forward in the sequence, negative moves one step back. in dirac mode it may be necessary to use [square] before some trigger sources.\
\
liszt: the sequence of values or S-expressions to be stepped through\
\pard\pardeftab720\li960\fi960\ql\qnatural
\cf0 mul: output will be multiplied by this value\
add: this value will be added to output\
\
\ul example\ulnone :\

\i ([horn a]
\i0 \

\i ([togo a] ([major d]) 53 13 94 11 52 110 35 26 35 43 36 8)
\i0 \

\i ([togo b] ([major d]) 65 14 32 85 57 43 14 28 50 11 35)
\i0 \

\i ([slew a] ([major d]) 8 8)))
\i0 \
\pard\pardeftab720\ql\qnatural
\cf0 \
\pard\pardeftab720\ql\qnatural

\b \cf0 swoop\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0[swoop] trig nume deno mul add
\b0 \
\
\pard\pardeftab720\li960\fi960\ql\qnatural
\cf0 \ul Description\ulnone : 
\i a slow triangle wave, can be used as envelope or LFO
\i0 \
trig/square: begins a swoop cycle\
nume: sets the rate of rise and fall of the swoop\
deno: sets the swoop\'92s boundaries (height or depth)\
mul: output will be multiplied by this value\
add: this value will be added to output\
\pard\pardeftab720\li960\ql\qnatural
\cf0 \
\pard\pardeftab720\li960\fi960\ql\qnatural
\cf0 \ul example\ulnone :\
\pard\pardeftab720\li1920\ql\qnatural

\i \cf0 ; use minor b button to trigger a note with separate envelopes for amplitude, \'a0filter q and filter freq
\i0 \
\pard\pardeftab720\li960\fi960\ql\qnatural

\i \cf0 ([wave a] ([horn a] 60 84 ([swoop a] ([minor b]) 3 120))
\i0 \

\i ([swoop b] ([minor b]) 10 30 40 5)
\i0 \

\i ([swoop c] ([minor b]) 2 72))
\i0 \
\
\pard\pardeftab720\ql\qnatural
\cf0 \
\pard\pardeftab720\ql\qnatural

\b \cf0 mount\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0[mount] nume deno mul add
\b0 \
\pard\pardeftab720\li960\fi960\ql\qnatural
\cf0 \
\ul Description\ulnone : 
\i a slow-cycling LFO
\i0 \
nume: sets the rate of rise and fall\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\
deno: sets the boundaries\
mul: output will be multiplied by this value\
add: this value will be added to output\
\
\ul example\ulnone :\

\i ; slow moving LFOs modulating pitch (nume and deno) and volume of two saws
\i0 \
([saw a] ([mount a] 73 21) ([mount b] 32 41) ([mount c] 80 100))\
([saw b] ([mount d] 13 52) ([mount e] 99 98) ([mount f] 23 83))\
\
\
\pard\pardeftab720\ql\qnatural

\b \cf0 smoke \'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0[smoke] mul add
\b0 \
\
\pard\pardeftab720\li960\fi960\ql\qnatural
\cf0 \ul Description\ulnone : 
\i generates white smoke (random values)
\i0 \
mul: output will be multiplied by this value\
add: this value will be added to output\
\pard\pardeftab720\ql\qnatural
\cf0 \
\pard\pardeftab720\li960\fi960\ql\qnatural
\cf0 \ul example\ulnone :\

\i ; use major b and d buttons to trigger 808 kick and hihat
\i0 \
([smoke a] ([slew a] ([major a]) 100 5 64))\
([horn a] 24 127([slew b] ([minor a]) 100 1))\
\
\pard\pardeftab720\ql\qnatural
\cf0 \
\pard\pardeftab720\ql\qnatural

\b \cf0 dust \'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0[dust] speed mul add
\b0 \
\
\pard\pardeftab720\li960\fi960\ql\qnatural
\cf0 \ul Description\ulnone : 
\i pulses spaced randomly over a wide range
\i0 \
speed: sets the density of pulses\
mul: output will be multiplied by this value\
add: this value will be added to output\
\ul example\ulnone :\

\i ; use the bars to trigger a chaotic cascade of zither strings
\i0 \
([zither a] ([sauce a] 30 ([dust a] ([bar a]))) ([corp a]) ([corp b] 80 40))\
([zither b] ([sauce b] 20 ([dust b] ([bar b]))) ([corp b] 70 50) ([corp a]))\
([zither c] ([sauce c] 10 ([dust c] ([bar c]))) ([corp a]) ([corp b] 60 60))\
([zither d] ([dust d] ([bar d] 60)) ([corp b] 50 70) ([corp a]))\
\
\
\pard\pardeftab720\ql\qnatural

\b \cf0 fog\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0[fog] trig nume deno nume deno mul add
\b0 \

\b haze\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0[haze] trig nume deno nume deno mul add
\b0 \

\b swamp\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0[swamp] trig nume deno nume deno mul add
\b0 \
\pard\pardeftab720\li1920\ql\qnatural
\cf0 \
\ul Description\ulnone : 
\i these are granular synthesis-type effects, each utilizing an internal oscillator and envelope to articulate the grains. fog uses horn grains, haze uses saw grains and swamp features animated grains
\i0 \
trig: trigger the playing of grains\
\pard\pardeftab720\li960\fi960\ql\qnatural
\cf0 nume:sets the rate of rise/fall of the internal envelope\
deno: sets the boundaries (height/depth) of the internal envelope\
nume: sets the rise/fall of the internal oscillator\
deno: sets the boundaries (heigh/depth) of the internal oscillator\
mul: \'a0output will be multiplied by this value\
add: this value will be added to output\
\pard\pardeftab720\li960\ql\qnatural
\cf0 \
\pard\pardeftab720\li960\fi960\ql\qnatural
\cf0 \ul example\ulnone :\

\i ; use the bars to trigger a chaotic cascade of grains
\i0 \
([fog a] ([dust a] ([bar a])) ([corp a] 60 10) ([corp b] 90 30)\
([salsa a] ([dust a]) ([smoke a])) 80)\
([haze b] ([dust b] ([bar b])) ([corp a] 70 20) ([corp b] 100 20)\
([salsa b] ([dust b]) ([smoke b])) 60 50))\
([right]\
([haze c] ([dust c] ([bar c])) ([corp a] 52 10) ([corp b] 96 26)\
([salsa c] ([dust c]) ([smoke c])) 40 50)\
([swamp d] ([dust d] ([bar d])) ([corp a] 63 20) ([corp b] 88 38)\
([salsa d] ([dust d]) ([smoke d])) 20))\
\
\
\
\pard\pardeftab720\ql\qnatural

\b \cf0 string \'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0[string] trig nume deno feedback mul add
\b0 \
\
\pard\pardeftab720\li960\fi960\ql\qnatural
\cf0 \ul Description\ulnone : 
\i a stringlus-strong string synthesis algorithm
\i0 \
trig: \'a0the excitation source\
nume: numerator of delay period (set to 1 for lower pitch effects)\
deno: denominator of delay period (set higher for lower pitch effects)\
feedback: sets the feedback amount (set higher for more resonance)\
mul: output will be multiplied by this value\
add: this value will be added to output\
\pard\pardeftab720\li960\ql\qnatural
\cf0 \
\pard\pardeftab720\li960\fi960\ql\qnatural
\cf0 \ul example\ulnone : \'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\

\i ; play strings with butts and corps
\i0 \
([string a] ([minor a]) 1 ([corp b] \'a08 24) 126)\
([string b] ([minor b]) 1 ([corp b] \'a08 20) 125)\
([string c] ([minor c]) 1 ([corp a] \'a04 16) 127)\
([string d] ([minor d]) 1 ([corp a] \'a0 4 12) 126)\
\pard\pardeftab720\ql\qnatural
\cf0 \
\pard\pardeftab720\ql\qnatural

\b \cf0 comb \'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0[comb]
\i \'a0
\i0 inn nume deno feedback mul add
\b0 \
\
\pard\pardeftab720\li1920\ql\qnatural
\cf0 \ul Description\ulnone : 
\i a comb filter with variable delay time and feedback
\i0 \
inn: \'a0the source to be delayed\
\pard\pardeftab720\li960\fi960\ql\qnatural
\cf0 nume: numerator of delay period (set to 1 for lower pitch effects)\
deno: denominator of delay period (set higher for lower pitch effects)\
feedback: sets the feedback amount (set higher for more resonance)\
\pard\pardeftab720\li1920\ql\qnatural
\cf0 mul: \'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0output will be multiplied by this value\
add: \'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0this value will be added to output\
\pard\pardeftab720\li960\ql\qnatural
\cf0 \
\pard\pardeftab720\li1920\ql\qnatural
\cf0 \ul example\ulnone :\

\i ; comb filtered resonant pings - play with bars and corps
\i0 \

\i ([right]
\i0 \

\i ([comb a]
\i0 \

\i \'a0 \'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0([water b]
\i0 \

\i \'a0 \'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0([dust b] \'a0([corp a] 8) -6)
\i0 \

\i \'a0 \'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a01 ([corp b] 33 38))
\i0 \

\i \'a0 \'a01 \'a0100 110))
\i0 \

\i ([left]
\i0 \

\i ([comb b]
\i0 \

\i \'a0 \'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0([sauce a] 3 ([water c]
\i0 \

\i \'a0 \'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0([dust c] \'a0([bar a] 18) -8)
\i0 \

\i \'a0 \'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a01 ([bar d] 18 28)))
\i0 \

\i \'a0 \'a01 \'a0110 112))
\i0 \
\
\
\pard\pardeftab720\ql\qnatural

\b \cf0 zither \'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0[string] trig nume deno feedback mul add
\b0 \
\
\pard\pardeftab720\li960\fi960\ql\qnatural
\cf0 \ul Description\ulnone : 
\i stringlus-strong synthesis consisting of 4 plucks per instance
\i0 \
trig: \'a0the excitation source\
nume: numerator of delay period (set to 1 for lower pitch effects)\
deno: denominator of delay period (set higher for lower pitch effects)\
feedback: sets the feedback amount (set higher for more resonance)\
mul: output will be multiplied by this value\
add: this value will be added to output\
\pard\pardeftab720\li960\ql\qnatural
\cf0 \
\pard\pardeftab720\li960\fi960\ql\qnatural
\cf0 \ul example\ulnone : \'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\
([srate] 12)\
([togo a] ([major b]) 10 15 30)\
([togo b] ([major c]) 48 60 72)\
([togo c] ([major d]) 40 46 54)\
([togo d] ([minor d]) () -36)\
\
([left]\
\
\pard\pardeftab720\li1920\ql\qnatural
\cf0 ([zither b] ([square] ([swoop b] ([swoop b] 1) ([slew a] ([togo a]) 4 4) 100) 1) ([togo b]) 30 118))\
\pard\pardeftab720\li960\fi960\ql\qnatural
\cf0 \
([right]\
\pard\pardeftab720\li1920\ql\qnatural
\cf0 ([zither c] ([square] ([swoop c] ([swoop c] 1) ([slew a]) ([add] 100 ([togo d]))) 1) ([togo c]) 70 118))\
\pard\pardeftab720\li960\fi960\ql\qnatural
\cf0 \
\
\
\pard\pardeftab720\ql\qnatural
\cf0 \
\pard\pardeftab720\ql\qnatural

\b \cf0 wave\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0[wave ] inn q rate mul add
\b0 \

\b salt\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0[salt ] inn q rate mul add
\b0 \
\
\pard\pardeftab720\li1920\ql\qnatural
\cf0 \ul Description\ulnone : 
\i variable resonance filters - wave is lopass; salt is highpass;
\i0 \
inn: \'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0the source to be filtered\
\pard\pardeftab720\li960\fi960\ql\qnatural
\cf0 q: \'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0sets the filter resonance\
rate: \'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0sets the filter base frequency\
mul: \'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0output will be multiplied by this value\
add: \'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0this value will be added to output\
\pard\pardeftab720\li960\ql\qnatural
\cf0 \
\pard\pardeftab720\li960\fi960\ql\qnatural
\cf0 \ul example\ulnone : \'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\

\i ; waveering a saw wave with freq being swept by mount, vary Q with corp
\i0 \
\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0([pan] ([mount a])\
([wave a]\
\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0([saw a] 36 87 )\
\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0([corp a] 14 2) \'a0([mount a] 11 97))\
\
\
\pard\pardeftab720\ql\qnatural

\b \cf0 water\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0[water ] trig q rate mul add
\b0 \
\
\pard\pardeftab720\li1920\ql\qnatural
\cf0 \ul Description\ulnone : 
\i a wash of resonant filter pings
\i0 \
trig: \'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0the trigger source\
\pard\pardeftab720\li960\fi960\ql\qnatural
\cf0 q: \'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0sets the filter resonance\
rate: \'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0sets the filter base frequency\
mul: \'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0output will be multiplied by this value\
add: \'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0this value will be added to output\
\pard\pardeftab720\li960\ql\qnatural
\cf0 \
\pard\pardeftab720\li960\fi960\ql\qnatural
\cf0 \ul example\ulnone : \'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\
\pard\pardeftab720\ql\qnatural
\cf0 \
\
\pard\pardeftab720\ql\qnatural

\b \cf0 horse \'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0[horse] nume nume deno deno mul add
\b0 \
\
\pard\pardeftab720\li1920\ql\qnatural
\cf0 \ul Description\ulnone : 
\i an oscillator with independently settable rise and fall and upper/lower boundaries
\i0 \
nume: \'a0sets the rate at which the oscillator rises\
deno:\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0sets the rate at which the oscillator falls\
nume: \'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0sets the oscillator\'92s upper boundary (height)\
deno:\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0sets the oscillator\'92s lower boundary (depth)\
mul: \'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0output will be multiplied by this value\
add: \'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0this value will be added to output\
\pard\pardeftab720\li960\ql\qnatural
\cf0 \
\pard\pardeftab720\li960\fi960\ql\qnatural
\cf0 Examples: \'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\

\i ; set waveshape with barres and corps, waveer output with [corp a] also modulating cutoff)
\i0 \
\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0([wave a]\
\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0([horse a]\
\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0([bar a] 26 ([corp a] 35 50))\
\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0([bar b] 14 91)\
\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0([bar c] 53 61)\
\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0([bar d] 42 ([corp b] 22 63))\
\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0([corp b]))\
\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a011 \'a0([corp a] 33 60)\
\pard\pardeftab720\ql\qnatural
\cf0 \
\
\pard\pardeftab720\ql\qnatural

\b \cf0 slew\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0[slew] inn upp donn mul add
\b0 \
\
\pard\pardeftab720\li1920\ql\qnatural
\cf0 \ul Description\ulnone :
\i \'a0slows the movement from one value to the next; works bi-directionally
\i0 \
inn:\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0input the expression to be slewed\
\pard\pardeftab720\li960\fi960\ql\qnatural
\cf0 upp: \'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0the slew rate for increasing values (lower number is slower)\
donn: \'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0the slew rate for decreasing values (lower number is slower)\
\pard\pardeftab720\li1920\ql\qnatural
\cf0 mul: \'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0output will be multiplied by this value\
add: \'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0this value will be added to output\
\pard\pardeftab720\li960\fi960\ql\qnatural
\cf0 \
\ul example\ulnone : \'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0([slew a]) \'85.\
\pard\pardeftab720\fi960\ql\qnatural
\cf0 \
\
\pard\pardeftab720\ql\qnatural

\b \cf0 wheel\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0[wheel] up down mul add
\b0 \
\
\pard\pardeftab720\li1920\ql\qnatural
\cf0 \ul Description\ulnone : \'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0
\i accumulates values, often used to make bars, buttons and corps increment upwards and/or downwards.
\i0 \
\pard\pardeftab720\li960\fi960\ql\qnatural
\cf0 up:\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0value to be positively incremented\
down: \'a0value to be negatively incremented\
mul: \'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0output will be multiplied by this value\
add: \'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0this value will be added to output\
\pard\pardeftab720\li960\ql\qnatural
\cf0 \
\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\ul example\ulnone : \'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0([wheel a] \'85.\
\pard\pardeftab720\ql\qnatural
\cf0 \
\pard\pardeftab720\ql\qnatural

\b \cf0 sauce \'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0[sauce] period inn mul add
\b0 \
\
\pard\pardeftab720\li1920\ql\qnatural
\cf0 \ul Description\ulnone : 
\i slows things down by only evaluating expressions after waiting a specified delay period. \'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0
\i0 \
\pard\pardeftab720\li960\ql\qnatural
\cf0 \'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0period:\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0sets the period to wait before evaluating each expression\
\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0inn: \'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0the expression to be slowed down\
\pard\pardeftab720\li960\fi960\ql\qnatural
\cf0 mul: \'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0output will be multiplied by this value\
add: \'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0this value will be added to output\
\pard\pardeftab720\li960\ql\qnatural
\cf0 \
\pard\pardeftab720\li960\fi960\ql\qnatural
\cf0 \ul example\ulnone : \'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0([sauce c] \'85.\
\pard\pardeftab720\ql\qnatural
\cf0 \
\
\pard\pardeftab720\ql\qnatural

\b \cf0 salsa\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0[salsa] trig inn mul add
\b0 \
\
\pard\pardeftab720\li960\ql\qnatural
\cf0 \'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\ul Description\ulnone : 
\i a sample and hold
\i0 \
\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0trig: \'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0triggers a sample\
\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0inn: \'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0the source to be sampled\
\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0mul: \'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0output will be multiplied by this value\
\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0add: \'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0this value will be added to output\
\
\
\pard\pardeftab720\ql\qnatural

\b \cf0 press\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0[press] inn att dec mul add
\b0 \
\
\pard\pardeftab720\li960\ql\qnatural
\cf0 \'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\ul Description\ulnone : 
\i a compressor
\i0 \
\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0inn: \'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0the source to be compressed\
\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0att: \'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0the attack of the compressor\
\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0dec:\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0the decay of the compressor\
\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0thresh:\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0the threshold above which the compressor kicks in\
\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0mul: \'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0output will be multiplied by this value\
\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0add: \'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0this value will be added to output\
\
\pard\pardeftab720\li960\ql\qnatural

\b \cf0 \'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0
\b0 \ul example:\ulnone \
\
\
\pard\pardeftab720\ql\qnatural

\b \cf0 leak\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0[leak] inn nume mul add
\b0 \
\

\b \'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0
\b0 \ul Description:\ulnone \'a0
\i a noise gate
\i0 \
\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0inn: the source to be gated\
\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0nume: the amount of noise gating to apply\
\pard\pardeftab720\li960\ql\qnatural
\cf0 \'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0mul: output will be multiplied by this value\
\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0add: this value will be added to output\
\pard\pardeftab720\ql\qnatural
\cf0 \
\pard\pardeftab720\ql\qnatural

\b \cf0 reflect\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0[reflect] inn oth mul add
\b0 \

\b return\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0[return] inn oth mul add
\b0 \

\b and\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0[and] inn oth mul add
\b0 \

\b xor\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0[xor] inn oth mul add
\b0 \
\
\pard\pardeftab720\li1920\ql\qnatural
\cf0 \ul Description: 
\i \ulnone \'a0a family of waveshapers; reflect - reflects input down at threshold; return- \'a0returns input to 0 at threshold; and, xor - apply logic functions to inputs
\i0 \
inn: input to be waveshaped\
oth: threshold / other value for logic function\
\pard\pardeftab720\li960\fi960\ql\qnatural
\cf0 mul: output will be multiplied by this value\
\pard\pardeftab720\li960\ql\qnatural
\cf0 \'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0add: this value will be added to output\
\pard\pardeftab720\li1920\ql\qnatural
\cf0 \
\pard\pardeftab720\ql\qnatural

\b \cf0 negwon\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0(negwon)
\b0 \
\

\b \'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0
\b0 \ul Description\ulnone :
\i \'a0use this expression for the value \'91-1\'92
\i0 \
\pard\pardeftab720\li1920\ql\qnatural
\cf0 \
\pard\pardeftab720\ql\qnatural

\b \cf0 left\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0[
\i left] liszt
\i0\b0 \
\
\pard\pardeftab720\li1920\ql\qnatural
\cf0 \ul Description\ulnone : 
\i sends the output to the left DAC
\i0 \
\pard\pardeftab720\li960\fi960\ql\qnatural
\cf0 liszt: takes an unlimited list\
\pard\pardeftab720\li960\ql\qnatural
\cf0 \
\
\pard\pardeftab720\ql\qnatural

\b \cf0 right\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0[
\i right] liszt
\i0\b0 \
\
\pard\pardeftab720\li1920\ql\qnatural
\cf0 \ul Description\ulnone : 
\i sends the output to the right DAC
\i0 \
\pard\pardeftab720\li960\fi960\ql\qnatural
\cf0 liszt: takes an unlimited list\
\
\pard\pardeftab720\ql\qnatural

\b \cf0 square\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0
\i [square] inn oth mul add
\i0\b0 \
\
\pard\pardeftab720\li1920\ql\qnatural
\cf0 \ul Description\ulnone : \'a0
\i a comparator which generates a squarewave if the input is greater than the other.
\i0 \
\pard\pardeftab720\li960\ql\qnatural
\cf0 \'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0inn: the input\
\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0oth: the other input (reference)\
\pard\pardeftab720\li960\fi960\ql\qnatural
\cf0 mul: output will be multiplied by this value\
\pard\pardeftab720\li960\ql\qnatural
\cf0 \'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0add: this value will be added to output\
\
\pard\pardeftab720\ql\qnatural

\b \cf0 modo\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0[modo] inn oth mul add
\b0 \
\
\pard\pardeftab720\li1920\ql\qnatural
\cf0 \ul Description: 
\i \ulnone \'a0a circuit-bending type effect whereby one input is mulitplied by another without scaling to keep it in range
\i0 \
inn: the input\
oth: the other input\
\pard\pardeftab720\li960\fi960\ql\qnatural
\cf0 mul: output will be multiplied by this value\
\pard\pardeftab720\li960\ql\qnatural
\cf0 \'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0add: this value will be added to output\
\pard\pardeftab720\li1920\ql\qnatural
\cf0 \
\ul example\ulnone :\
\pard\pardeftab720\ql\qnatural
\cf0 \
\pard\pardeftab720\ql\qnatural

\b \cf0 srate \'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0[srate] inn
\b0 \
\
\pard\pardeftab720\li1920\ql\qnatural
\cf0 \ul Description\ulnone : 
\i sets the sampling rate. this is a global variable\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0
\i0 \
\pard\pardeftab720\li960\fi960\ql\qnatural
\cf0 inn:\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0sets the sampling rate\
\pard\pardeftab720\li960\ql\qnatural
\cf0 \
\pard\pardeftab720\li960\fi960\ql\qnatural
\cf0 \ul example\ulnone : \'a0 ([srate] \'85.\
\
\pard\pardeftab720\ql\qnatural

\b \cf0 mul\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0[mul] inn mul add
\b0 \
\
\pard\pardeftab720\li1920\ql\qnatural
\cf0 \ul Description\ulnone : 
\i multiplies values in the list.
\i0 \
inn: input to be mul\'92d\
mul: inn will be multiplied by this value\
\pard\pardeftab720\li960\ql\qnatural
\cf0 \'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0add: this value will be added to output\
\pard\pardeftab720\ql\qnatural
\cf0 \
\pard\pardeftab720\li960\ql\qnatural
\cf0 \'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\ul example\ulnone : \'a0[mul] \'85.\
\pard\pardeftab720\ql\qnatural
\cf0 \
\pard\pardeftab720\ql\qnatural

\b \cf0 add\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0[add] liszt
\b0 \
\
\pard\pardeftab720\li1920\ql\qnatural
\cf0 \ul Description\ulnone : \'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0
\i adds values in the list. can be used to combine several s-expressions into one m-expression. it is infinitely reusable
\i0 \
\pard\pardeftab720\li960\ql\qnatural
\cf0 \
\pard\pardeftab720\li960\fi960\ql\qnatural
\cf0 liszt: takes an unlimited list\
\pard\pardeftab720\li960\ql\qnatural
\cf0 \
\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\ul example\ulnone : ([addl] \'85.\
\pard\pardeftab720\ql\qnatural
\cf0 \
\
\pard\pardeftab720\ql\qnatural

\b \cf0 tar\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0[tar] mul add
\b0 \
\
\pard\pardeftab720\li960\fi960\ql\qnatural
\cf0 \ul Description\ulnone : \'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0
\i transmits the value of the tare button (0 or 1)
\i0 \
mul: \'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0output will be multiplied by this value\
add: \'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0this value will be added to output\
\pard\pardeftab720\ql\qnatural
\cf0 \
\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0example: \'a0([tar] \'85.\
\
\pard\pardeftab720\ql\qnatural

\b \cf0 orange\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0[orange] inn
\b0 \
\
\pard\pardeftab720\li1920\ql\qnatural
\cf0 \ul Description: \'a0\ulnone \'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0WARNING: t
\i his is an experimental nut, which makes the orange LED addressable in the same manner as [lights]. however since doing so also initiates fast-charging of the batteries, continual use of this nut could possibly lead to shortened battery life. therefore it is NOT recommended to use
\b \'a0[orange]
\b0 \'a0until further testing can be completed.
\i0 \
\pard\pardeftab720\ql\qnatural
\cf0 \'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\
\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0inn: \'a0determines if LED is on or off\
\
\pard\pardeftab720\ql\qnatural

\b \cf0 jump\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0[jump] value
\b0 \
\
\pard\pardeftab720\li1920\ql\qnatural
\cf0 \ul Description: 
\i \ulnone \'a0 if 0, stays put; otherwise \'a0jumps value situations, as demarcated by curly brackets \{... \}. value may be negative
\i0 \
value: moves this number of situations within a txt file.\
\
\'a0\
\pard\pardeftab720\ql\qnatural

\b \cf0 pan\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0[pan] inn place
\b0 \
\
\pard\pardeftab720\li1920\ql\qnatural
\cf0 Description: pans the output through the stereo field. In Dirac mode, -128 is full left and 127 is full right. In Arab mode 0 is full left and 255 is full right\
\
inn: value to be panned\
place: position in the stereo field\
\pard\pardeftab720\ql\qnatural
\cf0 \
\pard\pardeftab720\ql\qnatural

\b \cf0 arab\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0[
\i arab] liszt
\i0\b0 \
\
\pard\pardeftab720\li1920\ql\qnatural
\cf0 \ul Description\ulnone : \'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0
\i invokes \'91arabic\'92 mode in which values are unsigned, \'a0i.e., no negative numbers. value range is thus 0 to 254.
\i0 \
liszt: takes an unlimited list\
\pard\pardeftab720\li960\ql\qnatural
\cf0 \
\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0Examples: \'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0([arab] \'85.\
\pard\pardeftab720\ql\qnatural
\cf0 \
\
\
\pard\pardeftab720\ql\qnatural

\b \cf0 short\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0[short] bigg smal
\b0 \
\
\pard\pardeftab720\li1920\ql\qnatural

\i \cf0 \ul Description:\ulnone \'a0describes a value with 16-bit precision. use bigg for coarser adjustments and \'a0smal for finer
\i0 \
\pard\pardeftab720\li960\fi960\ql\qnatural
\cf0 bigg: coarser adjustment of value (msb)\
\pard\pardeftab720\li1920\ql\qnatural
\cf0 smal: finer adjustment of value (lsb)\
\
\ul example:\ulnone \
\pard\pardeftab720\ql\qnatural
\cf0 \
\
\pard\pardeftab720\ql\qnatural

\b \cf0 dirac\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0[
\i dirac] liszt
\i0\b0 \
\
\pard\pardeftab720\li1920\ql\qnatural
\cf0 \ul Description\ulnone : \'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0
\i invokes \'91dirac\'92 mode in which values are unsigned (range of -128 to 127)
\i0 \
\pard\pardeftab720\li960\fi960\ql\qnatural
\cf0 liszt: takes an unlimited list\
\pard\pardeftab720\li960\ql\qnatural
\cf0 \
\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\ul example\ulnone : ([arab] \'85.\
\pard\pardeftab720\ql\qnatural
\cf0 \
\pard\pardeftab720\ql\qnatural

\b \cf0 lights\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0[lights] inn
\b0 \
\
\pard\pardeftab720\li1920\ql\qnatural
\cf0 \ul Description:\ulnone \'a0 
\i used to address the 8 burgundy LEDs
\i0 \'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\
\pard\pardeftab720\ql\qnatural
\cf0 \'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0inn: \'a0determines which LEDs are on/off\
\
\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0example:\
\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0; use LEDs to represent value of [corp a]\
\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0
\i ([lights] ([corp a]))
\i0 \
\
\
\pard\pardeftab720\ql\qnatural

\fs26 \cf0 \cb2 Published by {\field{\*\fldinst{HYPERLINK "https://docs.google.com/"}}{\fldrslt \cf4 \ul \ulc4 Google Drive}}\'96{\field{\*\fldinst{HYPERLINK "https://docs.google.com/abuse?id=1SexTfdaEcz6AtdOrBkiTWPSAK-jKj-NwFLZM0K0v6UQ"}}{\fldrslt \cf4 \ul \ulc4 Report Abuse}}\'96Updated automatically every 5 minutes}